#!/usr/bin/env node

'use strict';
var Promise = require('bluebird');
var exec = require('child_process').exec;
var Table = require('cli-table2');
var fs = Promise.promisifyAll(require('fs'));
var yargs = require('yargs').argv;
var _ = require('lodash');
if (yargs.help || yargs.h) {
    process.stdout.write(`Usage: 
        pmon node -> Shows all procsses matching the argument and their associated bound ports (if any)
        pmon -b node -> Shows only matching processes bound to a port.`);
    process.exit();
}
var grepArg;
var numArgs = Object.keys(yargs).length;
if (process.argv.length === numArgs) {
    process.stderr.write('Must supply a search term (PID, process name)'); process.exit();
}
else {
    grepArg = process.argv[numArgs];
}

function stripNullChars(stdout) {
    //proc cmdline has null characters for spaces, but only non-trailing should be converted
    //otherwise it causes formatting issues with cli-table2 
    stdout = stdout.replace(/\0+$/,'');
    stdout = stdout.replace(/\0/g,' ');
    return stdout;
}
function populateName(pid) {
    return new Promise((resolve, reject) => {
        exec("cat /proc/" + pid + "/cmdline", (error, stdout, stderr) => {
            if (error || stderr) {
                reject(error || stderr);
            }
            stdout = stripNullChars(stdout);
            resolve(stdout);
        });
    });
}
function readProcFile(fileName, pid) {
    //always resolve because this function is being used to resolve a Promise.all
    return new Promise((resolve, reject) => {
        var fullFile = `/proc/${pid}/${fileName}`;
        if (fileName !== 'cwd') {
            //reads a proc file - if fileName is cwd, it returns the symbolic link location.
            fs.readFileAsync(fullFile).then((fileResult) => {
                //strip null chars / check for empty
                var fileBody = stripNullChars(fileResult.toString());
                if (fileBody.length) {
                    resolve({result: fileBody, error: false, pid: pid, fileName: fileName});
                }
                else {
                    resolve({result: '', error: true, pid: pid, fileName: fileName});
                }
            }).catch((err) => {
                resolve({result: err, error: true, pid: pid, fileName: fileName});
            });
        }
        else {
            fs.readlinkAsync(fullFile).then((fileResult) => {
                resolve({result: fileResult, error: false, pid: pid, fileName: fileName});
            }).catch((err) => {
                resolve({result: err, error: true, pid: pid, fileName: fileName});
            });
        }
    });
}
function doAlphaSearch(grepArg) {
    return new Promise((resolve, reject) => {
        buildPidHash().then((pidHash) => {
            //search through the properties of the hash for something matching the grepArg.
            var matchedData = {};
            var pids = Object.keys(pidHash);
            pids.forEach((pid) => {
                var procKeys = Object.keys(pidHash[pid]);
                procKeys.forEach((procKey, procKeyIndex) => {
                    if (pidHash[pid][procKey].indexOf(grepArg) !== -1 && pidHash[pid][procKey].indexOf('pmon') === -1) {
                        if (!matchedData[pid]) {
                            matchedData[pid] = {};
                        }
                        matchedData[pid][procKeys[procKeyIndex]] = pidHash[pid][procKey];
                    }
                });
            });
            resolve(matchedData);
        });
    });
}
function buildPidHash() {
    return new Promise((resolve, reject) => {
        exec("find /proc/ -maxdepth 1 -type d | cut -d '/' -f3-", (error, stdout, stderr) => {
            var filesToRead = [];
            var pidHash = {};
            if (error || stderr) {
                reject(error || stderr);
            }
            if (stdout) {
                var pids = stdout.split('\n');
                pids.forEach((pid, pidIndex) => {
                   //filter out any non-digit dirs is /proc here - grep with extended or PCRL is only
                   //consistent on GNU Grep.
                   if (pid.match(/\D/) === null) {
                      filesToRead.push(readProcFile('cwd', pid));
                      filesToRead.push(readProcFile('cmdline', pid));
                   }
                });
                Promise.all(filesToRead).then((fileArr) => {
                    fileArr.forEach((promiseResult) => {
                        if (!promiseResult.error) {
                            if (!pidHash[promiseResult.pid]) {
                                pidHash[promiseResult.pid] = {};
                            }
                            var fileNameEval = promiseResult.fileName;
                            pidHash[promiseResult.pid][fileNameEval] = promiseResult.result;
                        }
                    });
                    resolve(pidHash);     
                });
            }
        });
    });
}
function buildListeningPortHash() {
    return new Promise((resolve, reject) => {
        exec("ss -nlp | grep " + grepArg + " | tr -d [:blank:] | cut -d ':' -f2- | sed 's/^\:://g' | sort", (error, stdout, stderr) => {
            if (stderr) {
                process.stderr.write(stderr);
                process.exit();
            }


            var lines = stdout.split('\n');
            lines.pop();
            var line;
            var processHash = {};
            var numPopulated = 0;
            if (!lines.length) {
                resolve(processHash);
            }
            lines.forEach((line, key) => {
                var port;
                var pid;
                var endPortPos = line.search(/\D/);
                if (endPortPos !== -1) {
                   port = line.substring(0, endPortPos); 
                }
                var parenIndex = line.indexOf('((');
                var endParenIndex = line.indexOf('))');
                pid = line.substring(parenIndex, endParenIndex);
                var firstCommaPos = pid.indexOf(',');
                var secondCommaPos = firstCommaPos + pid.substring(firstCommaPos+1).indexOf(',');
                pid = pid.substring(firstCommaPos+1, secondCommaPos + 1);
                // on some systems, the pid is prefixed by the literal 'pid='
                let literalPidPos = pid.indexOf('pid=');
                if (literalPidPos !== -1) {
                  pid = pid.substring(literalPidPos + 4);
                }
                processHash[pid] = {port: port};
                populateName(pid).then((name) => {
                    processHash[pid].desc = name;
                    numPopulated += 1;
                    if (numPopulated === lines.length) {
                        resolve(processHash);
                    }
                }).catch((err) => {
                   reject(err); 
                });
            });
        });
    });
}
function buildCombinedHash(alphaHash, portHash) {
    _.merge(alphaHash, portHash);
    return alphaHash;
}
function doMain() {
    return new Promise((resolve, reject) => {
        var isAlphaSearch = false;
        if (grepArg.match(/\D/) !== null) {
           isAlphaSearch = true; 
        }
        //by default, list processes bound to a port first, then other processes.
        //If there is a 'b' flag, do not do an alpha search on processes not known to be bound to a port.
        if (yargs.b) {
            buildListeningPortHash().then((portHash) => {
                resolve(portHash);
            }).catch((err) => {
                reject(err);
            });
        }
        else {
            doAlphaSearch(grepArg).then((alphaResult) => {
                buildListeningPortHash().then((portResult) => {
                   var combinedHash = buildCombinedHash(alphaResult, portResult);
                   resolve(combinedHash); 
                }).catch((err) => {
                    reject(err);
                });
            }).catch((err) => {
                reject(err);
            });
        }
    });
}
doMain().then((processHash) => {
    var hashKeys = Object.keys(processHash);
    if (!hashKeys.length) {
       process.stdout.write('Nothing matched.'); 
       process.exit();
    }
    var table = new Table({
        head: ['PID', 'Port', 'Description'],
        colWidths: [8, 8, 70],
        style: {
            head: [],
            border: []
        }
    });
    for (var i = 0; i < hashKeys.length; i++) {
        var desc = (processHash[hashKeys[i]].desc || processHash[hashKeys[i]].cmdline);
        table.push([hashKeys[i], processHash[hashKeys[i]].port, desc]);
    }
    process.stdout.write(table.toString());
}).catch((err) => {
    process.stderr.write(err);
});
